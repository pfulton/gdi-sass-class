slides:
  -
    content: |
      # Color Functions
      ###### Intro to Sass<!-- .element: class="short-title" -->

    options:
      class: section-card

  -
    content: |
      ### Color Functions

      Color functions are built-in to Sass. They let you alter existing color values. This is the <span class="blue">lighten</span> function:
      <table class="code-compare">
        <tr><td>

        Sass input:
        ```
        <span class="variable">$linkColor</span>: #000;
      <span class="variable">$linkShadow</span>: lighten(#000, 40%);
      a {
      color: <span class="variable">$linkColor</span>;
      text-shadow: <span class="variable">$linkShadow</span>;
      }
      ```
      </td>
      <td>

        CSS output:
        ```
        a {
      color: #000;
      text-shadow: #666;
      }```
      <p class="output-example" style="color: #000; text-shadow: 3px 2px #666;">Example of output style
      </tr></td></table>

  -
    content: |
      ### Color Functions

      This is the <span class="blue">darken</span> function:
      <table class="code-compare">
        <tr><td>

        Sass input:
        ```
        <span class="variable">$background</span>: #ff0000; // red
      <span class="variable">$text</span>: darken($background,50%);
      body {
      color: <span class="variable">$text</span>;
      background: <span class="variable">$background</span>;
      }
      ```
      </td>
      <td>

        CSS output:
        ```
        body {
      color: #990000;
      background: #ff0000;
      }```
      <p class="output-example" style="background-color: #f00; color: #900">Example of output style

      </tr></td></table>

  -
    content: |
      ### Color Functions

      This is the <span class="blue">grayscale</span> function:
      <table class="code-compare">
        <tr><td>

        Sass input:
        ```
        <span class="variable">$background</span>: #ff0000; // red
      <span class="variable">$text</span>: darken($background,50%);
      body {
      background: <span class="variable">grayscale(#f00)</span>;
      color: <span class="variable">grayscale(darken(#f00, 50%))</span>;
      }
      ```
      </td>
      <td>

        CSS output:
        ```
        body {
      background: #000;
      color: #808080;
      }```
      <p class="output-example grayscale">Example of output style

      </tr></td></table>

  -
    content: |
      ### Let's Develop It

      - Edit your variables in _utilities.scss file to use color functions
      - Refer to the <a target="_blank" href="http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html">sass-lang.com docs</a>
      - Compile to CSS to see your changes
      <li class="blue">Bonus - change the color scheme of your website without editing styles.scss!

      ```
      lighten(#000, 20%)
      darken(#eee, 30%)
      grayscale(#2a79af)
      saturate(#2a79af, 40%)
      invert(#2a79af)```

  -
    content: |
      ### Comments

      Traditional CSS comments are downloaded by the user. With Sass, we can specify whether comments are left in the final CSS code or are only visible to the developer:
      <table class="code-compare">
        <tr><td>

        Sass input:
        ```
        <span class="comment">/* Multiline comments will appear
      in the final CSS file */</span>
      <span class="value">//This single-line comment won't</span>
      a { color: blue; }
      ```
      </td>
      <td>

        CSS output:
        ```
        <span class="comment">/* Multiline comments will appear
      in the final CSS file */</span>
      a { color: blue; }```

      </tr></td></table>

  -
    content: |
      ### Mixins

       Mixins are really just a collection of one or more styles that are reusable, like variables are reusable values
      <table class="code-compare">
        <tr><td>

        Sass input:
        ```
        <span class="value">@mixin dropshadow(<span class="variable">$text</span>)</span> {
      color: <span class="variable">$text</span>;
      text-shadow: 2px 4px lighten(<span class="variable">$text</span>, 50%);
      }
      p {
      <span class="value">@include dropshadow(black);</span>
      }
      ```
      </td>
      <td>

        CSS output:
        ```
        p {
      color: black;
      text-shadow: 2px 4px #808080;
      }```
      <p class="output-example" style="color: black; text-shadow: 2px 4px #808080; background: transparent;">Example of output style

      </tr></td></table>

  -
    content: |
      ### Mixins

      These are especially useful for CSS3 rules that need browser prefixes, like gradients.

      <a target="_blank" href="http://cfarm.co/gradient">cfarm.co/gradient</a>

  -
    content: |
      ### Let's Develop It

      - Add some mixins to your _utilities.scss file - a good candidate is any style that needs a browser prefix
      - Try replacing the footer gradient with a mixin
      - Use these mixins in your styles.scss file
      - Add different types of comments that describe what your mixins do, and check the final CSS in the browser inspector to see if they appear

      ```
      @mixin name {
      property: value;
      }
      @mixin example($argument) {
      property: value;
      property: $argument;
      }
      ```

  -
    content: |
      Questions
